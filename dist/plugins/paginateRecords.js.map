{"version":3,"sources":["../../server/plugins/paginateRecords.js"],"names":["aggregate","options","populate","cb","Model","q","_pipeline","countQuery","page","pageSize","match","project","sort","skip","limit","count","Promise","all","results","pages","Math","ceil","parseInt","total","length","path","join","populatedRes","resolve","reject","docs","paginate","module","exports","schema","statics","paginateRecords"],"mappings":";;;;;;;0EACA,iBAAwBA,SAAxB;AAAA,YAAmCC,OAAnC,uEAA2C,EAA3C;AAAA,YAA+CC,QAA/C,uEAAwD,IAAxD;AAAA,YAA8DC,EAA9D;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACIF,oDAAeA,OAAf;AACMG,6BAFV,GAEkB,IAFlB;AAGQC,yBAHR,GAGY,KAAKL,SAAL,CAAeA,UAAUM,SAAzB,CAHZ;AAIQC,kCAJR,GAIqB,KAAKP,SAAL,CAAeK,EAAEC,SAAjB,CAJrB;AAKQE,4BALR,GAKeP,QAAQO,IAAR,IAAgB,CAL/B;AAMQC,gCANR,GAMmBR,QAAQQ,QAAR,IAAoB,EANvC;;AAOI,4BAAGR,QAAQS,KAAX,EAAiB;AACbL,8BAAEK,KAAF,CAAQT,QAAQS,KAAhB;AACH;AACD,4BAAGT,QAAQU,OAAX,EAAmB;AACfN,8BAAEM,OAAF,CAAUV,QAAQU,OAAlB;AACH;AACD,4BAAGV,QAAQW,IAAX,EAAgB;AACZP,8BAAEO,IAAF,CAAOX,QAAQW,IAAf;AACH;AACDP,0BAAEQ,IAAF,CAAO,CAACL,OAAK,CAAN,IAASC,QAAhB,EAA0BK,KAA1B,CAAgCL,QAAhC;AACA;AACIM,6BAlBR,GAkBgBX,MAAMW,KAAN,CAAYd,QAAQS,KAApB,CAlBhB;AAAA;AAAA,+BAmBwBM,QAAQC,GAAR,CAAY,CAACZ,CAAD,EAAIU,KAAJ,CAAZ,CAnBxB;;AAAA;AAmBQG,+BAnBR;;AAAA,6BAoBOA,OApBP;AAAA;AAAA;AAAA;;AAqBYC,6BArBZ,GAqBoBC,KAAKC,IAAL,CAAUC,SAASJ,QAAQ,CAAR,CAAT,IAAqBI,SAASrB,QAAQQ,QAAjB,CAA/B,CArBpB;AAsBYK,6BAtBZ,GAsBoBb,QAAQQ,QAtB5B;AAuBYD,6BAvBZ,GAuBoBc,SAASrB,QAAQO,IAAjB,CAvBpB;AAwBYe,6BAxBZ,GAwBoBL,QAAQ,CAAR,CAxBpB;;AAAA,8BAyBWhB,YAAYA,SAASsB,MAAT,KAAoB,CAzB3C;AAAA;AAAA;AAAA;;AAAA;AAAA,+BA0BuCpB,MAAMF,QAAN,CAAegB,QAAQ,CAAR,CAAf,EAA4B,EAACO,MAAMvB,SAASwB,IAAT,CAAc,GAAd,CAAP,EAA5B,CA1BvC;;AAAA;AA0BkBC,oCA1BlB;;AAAA,6BA4BeA,YA5Bf;AAAA;AAAA;AAAA;;AAAA,yDA6BuB,IAAIX,OAAJ,CAAY,UAACY,OAAD,EAAUC,MAAV,EAAqB;AACpCD,oCAAQ,EAACT,YAAD,EAAQX,WAAR,EAAcM,YAAd,EAAqBS,YAArB,EAA2BO,MAAMH,YAAjC,EAAR;AACH,yBAFM,CA7BvB;;AAAA;AAAA,yDAiCuB,IAAIX,OAAJ,CAAY,UAACY,OAAD,EAAUC,MAAV,EAAqB;AACpCA,mCAAO,IAAP;AACH,yBAFM,CAjCvB;;AAAA;AAAA;AAAA;;AAAA;AAAA,yDAwCmB,IAAIb,OAAJ,CAAY,UAACY,OAAD,EAAUC,MAAV,EAAqB;AACpCD,oCAAQ,EAACT,YAAD,EAAQX,WAAR,EAAcM,YAAd,EAAqBS,YAArB,EAA4BO,MAAMZ,QAAQ,CAAR,CAAlC,EAAR;AACH,yBAFM,CAxCnB;;AAAA;AAAA;AAAA;;AAAA;AAAA,yDA8Ce,IAAIF,OAAJ,CAAY,UAACY,OAAD,EAAUC,MAAV,EAAqB;AACpCA,mCAAO,IAAP;AACH,yBAFM,CA9Cf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeE,Q;;;;;;;;;AAsDfC,OAAOC,OAAP,GAAiB,UAAUC,MAAV,EAAkB;AAC/BA,WAAOC,OAAP,CAAeC,eAAf,GAAiCL,QAAjC;AACH,CAFD;AAGAC,OAAOC,OAAP,CAAeG,eAAf,GAAiCL,QAAjC","file":"paginateRecords.js","sourcesContent":["\nasync function paginate(aggregate, options={}, populate=null, cb){\n    options = { ...options };\n    const Model = this;\n    let q = this.aggregate(aggregate._pipeline);\n    let countQuery = this.aggregate(q._pipeline);\n    let page = options.page || 1;\n    let pageSize = options.pageSize || 10;\n    if(options.match){\n        q.match(options.match)\n    }\n    if(options.project){\n        q.project(options.project)\n    }\n    if(options.sort){\n        q.sort(options.sort)\n    }\n    q.skip((page-1)*pageSize).limit(pageSize);\n    // countQuery.group({ _id: null, count: { $sum: 1 } });\n    let count = Model.count(options.match);\n    let results = await Promise.all([q, count]);\n    if(results){\n        let pages = Math.ceil(parseInt(results[1])/parseInt(options.pageSize));\n        let limit = options.pageSize;\n        let page =  parseInt(options.page);\n        let total = results[1];\n        if(populate || populate.length === 0){\n            const populatedRes = await Model.populate(results[0],  {path: populate.join(' ') });\n            // result['docs'] = populatedRes;\n            if(populatedRes){\n                return new Promise((resolve, reject) => {\n                    resolve({pages, page, limit, total,docs: populatedRes})\n                });\n            } else  {\n                return new Promise((resolve, reject) => {\n                    reject(null)\n                });\n            }\n\n        }\n        else {\n            return new Promise((resolve, reject) => {\n                resolve({pages, page, limit, total, docs: results[0]})\n            });\n        }\n    }\n    else  {\n        return new Promise((resolve, reject) => {\n            reject(null)\n        });\n    }\n\n\n}\n\nmodule.exports = function (schema) {\n    schema.statics.paginateRecords = paginate;\n};\nmodule.exports.paginateRecords = paginate;"]}