{"version":3,"sources":["../../server/services/generateSalt.js"],"names":["generateSalt","str","Promise","resolve","reject","genSalt","err","salt","hash"],"mappings":";;;;;QAEiBA,Y,GAAAA,Y;;AAFjB;;;;;;AAEQ,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AAC/B,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA;AACf;AACA,6BAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;;AAE9B,oBAAID,GAAJ,EAAS;AAAE,2BAAOF,OAAOE,GAAP,CAAP;AAAqB;;AAEhC;AACA,iCAAOE,IAAP,CAAYP,GAAZ,EAAiBM,IAAjB,EAAuB,UAACD,GAAD,EAAME,IAAN,EAAe;AAClC,wBAAIF,GAAJ,EAAS;AAAE,+BAAOF,OAAOE,GAAP,CAAP;AAAqB;;AAEhC;AACA,2BAAOH,QAAQK,IAAR,CAAP;AACH,iBALD;AAMH,aAXD;AAFe;AAAA,KAAZ,CAAP;AAgBH","file":"generateSalt.js","sourcesContent":["import bcrypt from 'bcrypt';\n\nexport  function generateSalt(str) {\n    return new Promise((resolve, reject) =>\n        // Generate hash's random salt\n        bcrypt.genSalt(10, (err, salt) => {\n\n            if (err) { return reject(err); }\n\n            // Now, with the given salt, generate the hash\n            bcrypt.hash(str, salt, (err, hash) => {\n                if (err) { return reject(err); }\n\n                // Hash generated successfully!\n                return resolve(hash);\n            });\n        })\n\n    );\n}\n"]}