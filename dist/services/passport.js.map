{"version":3,"sources":["../../server/services/passport.js"],"names":["localOptions","usernameField","passwordField","session","passReqToCallback","localLogin","req","username","password","done","User","findOne","then","user","comparePassword","err","isMatch","catch","jwtOptions","jwtFromRequest","fromHeader","secretOrKey","jwtSecret","jwtLogin","payload","findById","sub","error"],"mappings":";;;;;;;AACA;;;;AACA;;AACA;;AAEA;;;;AACA;;;;;;AAEA;AACA,IAAMA,eAAe;AACjBC,mBAAe,OADE;AAEjBC,mBAAe,UAFE;AAGjBC,aAAS,KAHQ;AAIjBC,uBAAmB;AAJF,CAArB,C,CATA;AAeO,IAAMC,kCAAa,4BAAkBL,YAAlB,EAAgC,UAAUM,GAAV,EAAcC,QAAd,EAAwBC,QAAxB,EAAkCC,IAAlC,EAAwC;AAC9F;AACA;AACA,oBAAGC,IAAH,CAAQC,OAAR,CAAgB,EAACJ,kBAAD,EAAhB,EAA4BK,IAA5B,CAAiC,gBAAQ;AACrC,YAAG,CAACC,IAAJ,EAAU,OAAOJ,KAAK,IAAL,EAAW,KAAX,CAAP;AACVI,aAAKC,eAAL,CAAqBN,QAArB,EAA+B,UAAUO,GAAV,EAAeC,OAAf,EAAwB;AACnD,gBAAGD,GAAH,EAAQ,OAAON,KAAKM,GAAL,CAAP;AACR,gBAAG,CAACC,OAAJ,EAAa,OAAOP,KAAK,IAAL,EAAW,KAAX,CAAP;AACb,mBAAOA,KAAK,IAAL,EAAWI,IAAX,CAAP;AACH,SAJD;AAKH,KAPD,EAOGI,KAPH,CAOS,eAAO;AACZ,eAAOR,KAAKM,GAAL,CAAP;AACH,KATD;AAUH,CAbyB,CAAnB;;AAeA,IAAMG,kCAAa;AACtBC,oBAAgB,wBAAWC,UAAX,CAAsB,eAAtB,CADM;AAEtBC,iBAAa,iBAAOC;AAFE,CAAnB;AAIP;AACO,IAAMC,8BAAW,0BAAgBL,UAAhB,EAA4B,UAAUM,OAAV,EAAmBf,IAAnB,EAAyB;;AAEzE,oBAAGC,IAAH,CAAQe,QAAR,CAAiBD,QAAQE,GAAzB,EAA8Bd,IAA9B,CAAmC,gBAAQ;AACvC,YAAG,CAACC,IAAJ,EAAU,OAAOJ,KAAK,IAAL,EAAW,KAAX,CAAP;AACV,eAAOA,KAAK,IAAL,EAAWI,IAAX,CAAP;AACH,KAHD,EAGGI,KAHH,CAGS,iBAAS;AACd,eAAOR,KAAKkB,KAAL,CAAP;AACH,KALD;AAMH,CARuB,CAAjB","file":"passport.js","sourcesContent":["// npm packages\nimport passport from 'passport';\nimport {Strategy as LocalStrategy} from 'passport-local';\nimport {Strategy as JwtStrategy, ExtractJwt} from 'passport-jwt';\n\nimport db from '../models/index';\nimport config from '../config/config';\n\n// set up options for local Strategy\nconst localOptions = {\n    usernameField: 'email',\n    passwordField: 'password',\n    session: false,\n    passReqToCallback: true\n};\nexport const localLogin = new LocalStrategy(localOptions, function (req,username, password, done) {\n    // Verify  username and password, call done with user,\n    // if it is correct username and password, otherwise call done with false\n    db.User.findOne({username}).then(user => {\n        if(!user) return done(null, false);\n        user.comparePassword(password, function (err, isMatch) {\n            if(err) return done(err);\n            if(!isMatch) return done(null, false);\n            return done(null, user)\n        })\n    }).catch(err => {\n        return done(err);\n    })\n});\n\nexport const jwtOptions = {\n    jwtFromRequest: ExtractJwt.fromHeader('authorization'),\n    secretOrKey: config.jwtSecret\n};\n// Create JWT Strategy\nexport const jwtLogin = new JwtStrategy(jwtOptions, function (payload, done) {\n\n    db.User.findById(payload.sub).then(user => {\n        if(!user) return done(null, false);\n        return done(null, user)\n    }).catch(error => {\n        return done(error);\n    })\n});\n\n\n"]}