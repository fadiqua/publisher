{"version":3,"sources":["../../server/controllers/uploadController.js"],"names":["dbLoki","persistenceMethod","uploadController","uploadImage","req","res","file","meta","body","status","send","success","temp","setTimeout","unlink","resolve","__dirname","path","err","console","log","uploadProfilePicture","base64Data","image","originalname","Date","valueOf","Math","random","thumb","json","error","message"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;AACA,IAAMA,SAAS,qCAAyB,EAAEC,mBAAmB,IAArB,EAAzB,CAAf;AACA,IAAMC,mBAAmB,EAAzB;;AAEAA,iBAAiBC,WAAjB,GAA+B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzC,QAAMC,OAAOF,IAAIE,IAAjB,CADyC,CAClB;AACvB,QAAMC,OAAOH,IAAII,IAAjB,CAFyC,CAElB;AACvBH,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,iBAAS,IADQ;AAEjBL;AAFiB,KAArB;AAIH,CAPD;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,iBAAiBU,IAAjB;AAAA,0EAAwB,iBAAOR,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,4BADc,GACPF,IAAIE,IADG,EACG;;AACvBD,4BAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,IADQ;AAEjBL;AAFiB,yBAArB;AAIAO,mCAAW,YAAM;AACb,yCAAGC,MAAH,CAAU,eAAKC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,IAA9B,EAAoCV,KAAKW,IAAzC,CAAV,EAA0D,UAACC,GAAD,EAAS;AAC/D,oCAAGA,GAAH,EAAQ;AACRC,wCAAQC,GAAR,CAAY,SAAZ;AACH,6BAHD;AAIH,yBALD,EAKG,OAAK,EAAL,GAAQ,EALX;;AANoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB;;AAAA;AAAA;AAAA;AAAA;;AAcAlB,iBAAiBmB,oBAAjB;AAAA,2EAAwC,kBAAOjB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9BiB,kCAD8B,GACjBlB,IAAII,IAAJ,CAASe,KADQ;AAAA;;AAGhC;AACMC,oCAJ0B,GAIP,IAAIC,IAAJ,EAAD,CAAWC,OAAX,EAJQ,SAIgBC,KAAKC,MAAL,KAAc,KAJ9B;AAK1BtB,4BAL0B,GAKnB;AACTkB,sDADS;AAETP,+CAAiBO;AAFR,yBALmB;;AAShC,qDAAaF,UAAb,EAAyBhB,KAAKW,IAA9B;AATgC;AAAA,+BAUZ,6BAAcX,IAAd,CAVY;;AAAA;AAU1BuB,6BAV0B;;AAWhCxB,4BAAII,MAAJ,CAAW,GAAX,EAAgBqB,IAAhB,CAAqB;AACjBnB,qCAAS,IADQ;AAEjBL,sCAFiB;AAGjBuB;AAHiB,yBAArB;AAXgC;AAAA;;AAAA;AAAA;AAAA;;AAiBhCxB,4BAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBqB,mCAAO,aAAEC;AADQ,yBAArB;;AAjBgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxC;;AAAA;AAAA;AAAA;AAAA;kBA+Be9B,gB","file":"uploadController.js","sourcesContent":["import Loki from 'lokijs';\nimport upload from '../config/multer.config';\nimport saveThumbnail from '../utils/saveThumbnail';\nimport { base64Decode } from '../utils/functions';\nimport fs from 'fs';\nimport path from 'path'\nconst dbLoki = new Loki(`files/images`, { persistenceMethod: 'fs' });\nconst uploadController = {};\n\nuploadController.uploadImage = (req, res) => {\n    const file = req.file; // file passed from client\n    const meta = req.body; // all other values passed from the client, like name, etc..\n    res.status(200).send({\n        success: true,\n        file\n    })\n};\n\n// uploadController.uploadProfilePicture = async (req, res) => {\n//     const file = req.file; // file passed from client\n//     // console.log('file ', file)\n//     // const col = await loadCollection('files/images', dbLoki);\n//     // const data = col.insert(req.file);\n//     // dbLoki.saveDatabase();\n//     try {\n//         const thumb = await saveThumbnail(file);\n//         res.status(200).send({\n//             success: true,\n//             file,\n//             thumb\n//         })\n//     } catch(e) {\n//         res.status(500).send({\n//             success: false\n//         })\n//     }\n//\n// }\nuploadController.temp = async (req, res) => {\n    const file = req.file; // file passed from client;\n    res.status(200).send({\n        success: true,\n        file\n    });\n    setTimeout(() => {\n        fs.unlink(path.resolve(__dirname, '..', '..', file.path), (err) => {\n            if(err) return;\n            console.log('success')\n        })\n    }, 1000*60*60)\n};\n\nuploadController.uploadProfilePicture = async (req, res) => {\n    const base64Data = req.body.image;\n    try {\n        // path.resolve(__dirname, '..', '..', `files/${'base64-image.png'}`)\n        const originalname = `${(new Date).valueOf()}-${Math.random()*99999}.png`;\n        const file = {\n            originalname,\n            path: `./files/${originalname}`\n        };\n        base64Decode(base64Data, file.path);\n        const thumb = await saveThumbnail(file);\n        res.status(200).json({\n            success: true,\n            file,\n            thumb\n        })\n    } catch (e) {\n        res.status(500).send({\n            error: e.message\n        })\n    }\n    // const buffer = new Buffer(base64Data, 'base64').toString()\n    // fs.writeFile(path.resolve(__dirname, '..', '..', `files/${'base64-image.png'}`), base64Data, 'base64', function(err) {\n    //     if (err) console.log(err);\n        // fs.readFile(path.resolve(__dirname, '..', '..', `files/${'base64-image.png'}`), function(err, data) {\n        //     if (err) throw err;\n        //     console.log('reading file...', data.toString('base64'));\n        //     res.status(200).send(data);\n        // });\n    // });\n};\nexport default uploadController;"]}