{"version":3,"sources":["../../server/controllers/userController.js"],"names":["tokenForUser","user","timestamp","Date","getTime","sign","sub","id","permission","iat","jwtSecret","userController","localSignup","req","res","body","firstName","lastName","email","password","Error","length","LocalAuth","findOne","emailExists","createLocalUser","token","status","json","success","me","message","login","errorResponse","msg","comparePassword","err","isMatch","User","findById","socialLogin","network","socialToken","data","SocialAuth","findOrCreate","console","log","send","currentUser","error","getUserByUsername","username","params","Story","find","_creator","_id","limit","topStories","followUser","followedUser","followObj","Follow","_user","_followed","then","result","Promise","all","remove","Notifications","findOneAndRemove","_from","_to","type","save","populate","path","select","targetUser","catch","getMe","updateProfile","findByIdAndUpdate","new","getUserStories","page","query","paginate","isDeleted","membersOnly","sort","createdAt","stories","getUserResponses","Response","responses","getFollowers","users","getFollowings"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AACA;AACA;;AAEA,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,QAAMC,YAAY,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,WAAO,uBAAIC,IAAJ,CAAS,EAAEC,KAAIL,KAAKM,EAAX,EAAeC,YAAYP,KAAKO,UAAhC,EAA4CC,KAAKP,SAAjD,EAAT,EAAuE,iBAAOQ,SAA9E,CAAP;AACH;;AAED,IAAMC,iBAAiB,EAAvB;;AAEAA,eAAeC,WAAf;AAAA,0EAA6B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCACwBD,IAAIE,IAD5B,EACjBC,SADiB,aACjBA,SADiB,EACNC,QADM,aACNA,QADM,EACIC,KADJ,aACIA,KADJ,EACWC,QADX,aACWA,QADX;AAEzB;;AAFyB;;AAAA,4BAKjBH,SALiB;AAAA;AAAA;AAAA;;AAAA,8BAKA,IAAII,KAAJ,CAAU,wBAAV,CALA;;AAAA;AAAA,4BAMZH,QANY;AAAA;AAAA;AAAA;;AAAA,8BAMI,IAAIG,KAAJ,CAAU,uBAAV,CANJ;;AAAA;AAAA,4BAOZF,KAPY;AAAA;AAAA;AAAA;;AAAA,8BAOC,IAAIE,KAAJ,CAAU,mBAAV,CAPD;;AAAA;AAAA,8BAQb,CAACD,QAAD,IAAaA,SAASE,MAAT,GAAkB,CARlB;AAAA;AAAA;AAAA;;AAAA,8BAQ2B,IAAID,KAAJ,CAAU,iDAAV,CAR3B;;AAAA;AAAA;AAAA,+BASK,gBAAGE,SAAH,CAAaC,OAAb,CAAqB,EAAEL,YAAF,EAArB,CATL;;AAAA;AASfM,mCATe;;AAAA,8BAUlBA,gBAAgB,IAVE;AAAA;AAAA;AAAA;;AAAA,8BAUUJ,MAAM,sBAAN,CAVV;;AAAA;AAAA;AAAA,+BAWF,gBAAGE,SAAH,CAAaG,eAAb,CAA6B;AAC5CT,gDAD4C;AAE5CC,8CAF4C;AAG5CC,wCAH4C;AAI5CC;AAJ4C,yBAA7B,CAXE;;AAAA;AAWflB,4BAXe;AAiBjByB,6BAjBiB,GAiBT1B,aAAaC,IAAb,CAjBS;;AAkBrBa,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,IADQ;AAEjBC,gCAAI7B,IAFa;AAGjByB;AAHiB,yBAArB;AAlBqB;AAAA;;AAAA;AAAA;AAAA;;AAwBrBZ,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,KADQ;AAEjBE,qCAAS,YAAMA;AAFE,yBAArB;;AAxBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7B;;AAAA;AAAA;AAAA;AAAA;;AA+BApB,eAAeqB,KAAf;AAAA,2EAAuB,kBAAQnB,GAAR,EAAaC,GAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCACSD,IAAIE,IADb,EACXG,KADW,cACXA,KADW,EACJC,QADI,cACJA,QADI;;AAEbc,qCAFa,GAEG,SAAhBA,aAAgB,MAAQ;AAC1BnB,gCAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,yCAAS,KADQ;AAEjBE,yCAASG,OAAO;AAFC,6BAArB;AAIH,yBAPkB;;AAAA;AAAA;AAAA,+BASI,gBAAGZ,SAAH,CAAaC,OAAb,CAAqB,EAAEL,YAAF,EAArB,CATJ;;AAAA;AASTjB,4BATS;;AAAA,8BAUZA,SAAS,IAVG;AAAA;AAAA;AAAA;;AAWXgC,sCAAc,4CAAd;AAXW;;AAAA;AAcfhC,6BAAKkC,eAAL,CAAqBhB,QAArB;AAAA,mGAA+B,kBAAOiB,GAAP,EAAYC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDACxBD,OAAO,CAACC,OADgB;AAAA;AAAA;AAAA;;AAEvBJ;AAFuB;;AAAA;AAAA;AAAA,uDAKV,gBAAGK,IAAH,CAAQC,QAAR,CAAiBtC,KAAKA,IAAtB,CALU;;AAAA;AAKrB6B,kDALqB;AAMvBJ,qDANuB,GAMf1B,aAAa8B,EAAb,CANe;;AAO3BhB,oDAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,6DAAS,IADQ;AAEjBC,0DAFiB;AAGjBJ;AAHiB,iDAArB;;AAP2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA/B;;AAAA;AAAA;AAAA;AAAA;AAde;AAAA;;AAAA;AAAA;AAAA;AAAA,0DA6BRO,cAAc,aAAIF,OAAlB,CA7BQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAAA;AAAA;AAAA;AAAA;;AAkCApB,eAAe6B,WAAf;AAAA,2EAA6B,kBAAO3B,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCACcD,IAAIE,IADlB,EACjB0B,OADiB,cACjBA,OADiB,EACRC,WADQ,cACRA,WADQ,EACKC,IADL,cACKA,IADL;AAAA;AAAA;AAAA,+BAGF,gBAAGC,UAAH,CAAcC,YAAd,CAA2BJ,OAA3B,EAAoCE,IAApC,CAHE;;AAAA;AAGf1C,4BAHe;;AAIrB6C,gCAAQC,GAAR,CAAY,QAAZ,EAAsB9C,IAAtB;AACMyB,6BALe,GAKP1B,aAAaC,IAAb,CALO;;AAMrBa,4BAAIa,MAAJ,CAAW,GAAX,EAAgBqB,IAAhB,CAAqB;AACjBnB,qCAAS,IADQ;AAEjBoB,yCAAahD,IAFI;AAGjByB;AAHiB,yBAArB;AANqB;AAAA;;AAAA;AAAA;AAAA;AAAA,0DAYdZ,IAAIa,MAAJ,CAAW,GAAX,EAAgBqB,IAAhB,CAAqB;AACxBnB,qCAAS,KADe;AAExBqB,mCAAO,aAAEnB;AAFe,yBAArB,CAZc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7B;;AAAA;AAAA;AAAA;AAAA;;AAoBApB,eAAewC,iBAAf;AAAA,2EAAmC,kBAAOtC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBsC,gCADuB,GACVvC,IAAIwC,MADM,CACvBD,QADuB;AAAA;AAAA;AAAA,+BAGR,gBAAGd,IAAH,CAAQf,OAAR,CAAgB,EAAE6B,kBAAF,EAAhB,CAHQ;;AAAA;AAGrBnD,4BAHqB;AAAA;AAAA,+BAIF,gBAAGqD,KAAH,CAASC,IAAT,CAAc,EAACC,UAAUvD,KAAKwD,GAAhB,EAAd;AACrB;AADqB,yBAEpBC,KAFoB,CAEd,CAFc,CAJE;;AAAA;AAIrBC,kCAJqB;;AAO3B7C,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,IADQ;AAEjB5B,sCAFiB;AAGjB0D;AAHiB,yBAArB;AAP2B;AAAA;;AAAA;AAAA;AAAA;;AAa3B7C,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,KADQ;AAEjBqB;AAFiB,yBAArB;;AAb2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnC;;AAAA;AAAA;AAAA;AAAA;;AAqBAvC,eAAeiD,UAAf,GAA4B,UAAC/C,GAAD,EAAMC,GAAN,EAAc;AACtC,QAAMb,OAAOY,IAAIZ,IAAJ,CAASM,EAAtB;AACA,QAAMsD,eAAehD,IAAIE,IAAJ,CAASR,EAA9B;AACAuC,YAAQC,GAAR,CAAY,OAAZ,EAAqB9C,IAArB;AACA6C,YAAQC,GAAR,CAAY,eAAZ,EAA6Bc,YAA7B;AACA,QAAMC,YAAY,IAAI,gBAAGC,MAAP,CAAc;AAC5BC,eAAO/D,IADqB;AAE5BgE,mBAAWJ;AAFiB,KAAd,CAAlB;;AAKA,oBAAGE,MAAH,CAAUxC,OAAV,CAAkB;AACdyC,eAAO/D,IADO;AAEdgE,mBAAWJ;AAFG,KAAlB,EAGGK,IAHH;AAAA,+EAGQ,kBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACDA,MADC;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAGMC,QAAQC,GAAR,CAAY,CACdF,OAAOG,MAAP,EADc,EAEd,gBAAGC,aAAH,CAAiBC,gBAAjB,CAAkC;AAC9BC,uCAAOxE,IADuB;AAE9ByE,qCAAKb,YAFyB;AAG9Bc,sCAAM;AAHwB,6BAAlC,CAFc,CAAZ,CAHN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mCAYMb,UAAUc,IAAV,EAZN;;AAAA;AAAA;AAAA,mCAayB,gBAAGb,MAAH,CAAUc,QAAV,CAAmBf,SAAnB,EAA6B;AAClDgB,sCAAM,OAD4C;AAElDC,wCAAQ;AAF0C,6BAA7B,CAbzB;;AAAA;AAaMC,sCAbN;AAAA;AAAA,mCAiBM,IAAI,gBAAGT,aAAP,CAAqB;AACvBE,uCAAOxE,IADgB;AAEvByE,qCAAKb,YAFkB;AAGvBc,sCAAM;AAHiB,6BAArB,EAIHC,IAJG,EAjBN;;AAAA;AAuBJ9D,gCAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,yCAAS;AADQ,6BAArB;;AAvBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHR;;AAAA;AAAA;AAAA;AAAA,SA6BGoD,KA7BH,CA6BS,iBAAS;AACdnE,YAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qBAAS,IADQ;AAEjBqB;AAFiB,SAArB;AAIH,KAlCD;AAmCH,CA7CD;;AA+CAvC,eAAeuE,KAAf;AAAA,2EAAuB,kBAAOrE,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACXb,4BADW,GACFY,GADE,CACXZ,IADW;AAAA;;AAAA,4BAGXY,IAAIZ,IAHO;AAAA;AAAA;AAAA;;AAAA,8BAGK,IAAImB,KAAJ,CAAU,EAAV,CAHL;;AAAA;AAAA;AAAA,+BAIE,gBAAGkB,IAAH,CAAQC,QAAR,CAAiBtC,KAAKM,EAAtB,CAJF;;AAAA;AAITuB,0BAJS;;AAAA,4BAKXA,EALW;AAAA;AAAA;AAAA;;AAAA,8BAKD,IAAIV,KAAJ,CAAU,mBAAV,CALC;;AAAA;AAMfN,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,IADQ;AAEjBC;AAFiB,yBAArB;AANe;AAAA;;AAAA;AAAA;AAAA;;AAWfhB,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,KADQ;AAEjBE,qCAAS,aAAMA;AAFE,yBAArB;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAAA;AAAA;AAAA;AAAA;;AAkBApB,eAAewE,aAAf;AAAA,2EAA+B,kBAAOtE,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACnB6B,4BADmB,GACV9B,IAAIE,IADM,CACnB4B,IADmB;AAAA;AAAA;AAAA,+BAIJ,gBAAGL,IAAH,CAAQ8C,iBAAR,CAA0BvE,IAAIZ,IAAJ,CAASM,EAAnC,oBAA4CoC,IAA5C,GAAoD,EAAC0C,KAAK,IAAN,EAApD,CAJI;;AAAA;AAIjBpF,4BAJiB;;AAKvBa,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,IADQ;AAEjB5B;AAFiB,yBAArB;AALuB;AAAA;;AAAA;AAAA;AAAA;;AAUvBa,4BAAIa,MAAJ,CAAW,GAAX,EAAgBqB,IAAhB,CAAqB;AACjBE,mCAAO,aAAEnB;AADQ,yBAArB;;AAVuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA;;AAgBApB,eAAe2E,cAAf;AAAA,2EAAgC,kBAAOzE,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBsC,gCADoB,GACPvC,IAAIwC,MADG,CACpBD,QADoB;AAEpBmC,4BAFoB,GAEX1E,IAAI2E,KAFO,CAEpBD,IAFoB;AAAA;AAAA;AAAA,+BAIL,gBAAGjD,IAAH,CAAQf,OAAR,CAAgB,EAAE6B,kBAAF,EAAhB,CAJK;;AAAA;AAIlBnD,4BAJkB;AAAA;AAAA,+BAKF,gBAAGqD,KAAH,CACjBmC,QADiB,CACR;AACFjC,sCAAUvD,KAAKwD,GADb;AAEFiC,uCAAW,KAFT;AAGFC,yCAAa;AAHX,yBADQ,EAMd;AACIZ,oCAAQ,OADZ;AAEIa,kCAAM;AACFC,2CAAW,CAAC;AADV,6BAFV;AAKIN,sCALJ;AAMI7B,mCAAO;AANX,yBANc,CALE;;AAAA;AAKlBoC,+BALkB;;AAmBxBhF,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACIC,qCAAS;AADb,2BAEOiE,OAFP;AAnBwB;AAAA;;AAAA;AAAA;AAAA;;AAwBxBhF,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBsB,mCAAO,aAAEnB;AADQ,yBAArB;;AAxBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;;AAAA;AAAA;AAAA;AAAA;;AA8BApB,eAAeoF,gBAAf;AAAA,4EAAkC,mBAAOlF,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBsC,gCADsB,GACTvC,IAAIwC,MADK,CACtBD,QADsB;AAEtBmC,4BAFsB,GAEb1E,IAAI2E,KAFS,CAEtBD,IAFsB;AAAA;AAAA;AAAA,+BAIP,gBAAGjD,IAAH,CAAQf,OAAR,CAAgB,EAAE6B,kBAAF,EAAhB,CAJO;;AAAA;AAIpBnD,4BAJoB;AAAA;AAAA,+BAKF,gBAAG+F,QAAH,CACnBP,QADmB,CAEhB;AACIjC,sCAAUvD,KAAKwD,GADnB;AAEIiC,uCAAW;AAFf,yBAFgB,EAMhB;AACIE,kCAAM;AACFC,2CAAW,CAAC;AADV,6BADV;AAIIhB,sCAAU,QAJd;AAKIU,kCAAMA,QAAQ,CALlB;AAMI7B,mCAAO;AANX,yBANgB,CALE;;AAAA;AAKpBuC,iCALoB;;AAmB1BnF,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACIC,qCAAS;AADb,2BAEOoE,SAFP;AAnB0B;AAAA;;AAAA;AAAA;AAAA;;AAwB1BnF,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,KADQ;AAEjBqB,mCAAO,cAAEnB;AAFQ,yBAArB;;AAxB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC;;AAAA;AAAA;AAAA;AAAA;;AAgCApB,eAAeuF,YAAf;AAAA,4EAA8B,mBAAOrF,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBP,0BADkB,GACXM,IAAIwC,MADO,CAClB9C,EADkB;AAElBgF,4BAFkB,GAET1E,IAAI2E,KAFK,CAElBD,IAFkB;AAAA;AAAA;AAAA,+BAIF,gBAAGxB,MAAH,CAAU0B,QAAV,CAChB,EAAExB,WAAW1D,EAAb,EADgB,EAEhB,EAAEqF,MAAM,EAACC,WAAW,CAAZ,EAAR,EAAwBN,MAAMA,QAAQ,CAAtC,EAAyC7B,OAAO,CAAhD,EAFgB,CAJE;;AAAA;AAIhByC,6BAJgB;;AAQtBrF,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,mBACOuE,KADP;AARsB;AAAA;;AAAA;AAAA;AAAA;;AAYtBrF,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,KADQ;AAEjBqB,mCAAO,cAAEnB;AAFQ,yBAArB;;AAZsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AAAA;AAAA;AAAA;AAAA;;AAmBApB,eAAeyF,aAAf;AAAA,4EAA+B,mBAAOvF,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBP,0BADmB,GACZM,IAAIwC,MADQ,CACnB9C,EADmB;AAEnBgF,4BAFmB,GAEV1E,IAAI2E,KAFM,CAEnBD,IAFmB;AAAA;AAAA;AAAA,+BAIH,gBAAGxB,MAAH,CAAU0B,QAAV,CAChB,EAAEzB,OAAOzD,EAAT,EADgB,EAEhB,EAAEqF,MAAM,EAACC,WAAW,CAAZ,EAAR,EAAwBN,MAAMA,QAAQ,CAAtC,EAAyC7B,OAAO,EAAhD,EAFgB,CAJG;;AAAA;AAIjByC,6BAJiB;;AAQvBrF,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,mBACOuE,KADP;AARuB;AAAA;;AAAA;AAAA;AAAA;;AAYvBrF,4BAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,KADQ;AAEjBqB,mCAAO,cAAEnB;AAFQ,yBAArB;;AAZuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA;;kBAmBepB,c","file":"userController.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport config from '../config/config';\nimport db from '../models/index';\n// import request from 'request';\n// import io from '../index';\n\nfunction tokenForUser(user) {\n    const timestamp = new Date().getTime();\n    return jwt.sign({ sub:user.id, permission: user.permission ,iat: timestamp }, config.jwtSecret)\n}\n\nconst userController = {};\n\nuserController.localSignup = async (req, res) => {\n    const { firstName, lastName, email, password } = req.body;\n    // validation - username / password\n\n    try {\n        if(!firstName) throw new Error('Frist Name is Required');\n        else if(!lastName) throw new Error('Last Name is Required');\n        else if(!email) throw new Error('Email is Required');\n        else if(!password || password.length < 8) throw new Error('Invalid Password, must be at least 8 characters');\n        const emailExists = await db.LocalAuth.findOne({ email });\n        if(emailExists !== null) throw Error(\"Email already exists\");\n        const user = await db.LocalAuth.createLocalUser({\n            firstName,\n            lastName,\n            email,\n            password\n        });\n        let token = tokenForUser(user);\n        res.status(200).json({\n            success: true,\n            me: user,\n            token\n        })\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            message: error.message\n        })\n    }\n};\n\nuserController.login = async  (req, res) => {\n    const { email, password } = req.body;\n    const errorResponse = msg =>  {\n        res.status(500).json({\n            success: false,\n            message: msg || 'Invalid credentials'\n        });\n    };\n    try {\n        const user = await db.LocalAuth.findOne({ email });\n        if(user === null) {\n            errorResponse('This Email is not registered in the system')\n            return;\n        }\n        user.comparePassword(password, async (err, isMatch) => {\n            if(err || !isMatch){\n                errorResponse();\n                return;\n            }\n            const me = await db.User.findById(user.user);\n            let token = tokenForUser(me);\n            res.status(200).json({\n                success: true,\n                me,\n                token\n            });\n\n        });\n    } catch (err) {\n        return errorResponse(err.message)\n        // errResponse(err.message);\n    }\n};\n\nuserController.socialLogin = async (req, res) => {\n    const { network, socialToken, data } = req.body;\n    try {\n        const user = await db.SocialAuth.findOrCreate(network, data);\n        console.log('userr ', user)\n        const token = tokenForUser(user);\n        res.status(200).send({\n            success: true,\n            currentUser: user,\n            token\n        });\n    } catch (e) {\n        return res.status(500).send({\n            success: false,\n            error: e.message\n        })\n    }\n};\n\n\nuserController.getUserByUsername = async (req, res) => {\n    const { username } = req.params;\n    try {\n        const user = await db.User.findOne({ username });\n        const topStories = await db.Story.find({_creator: user._id})\n            // .sort({ '_likes.length': -1, '_comments.length': -1 })\n            .limit(3);\n        res.status(200).json({\n            success: true,\n            user,\n            topStories\n        })\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            error\n        })\n    }\n};\n\n\nuserController.followUser = (req, res) => {\n    const user = req.user.id;\n    const followedUser = req.body.id;\n    console.log('user ', user);\n    console.log('followedUser ', followedUser);\n    const followObj = new db.Follow({\n        _user: user,\n        _followed: followedUser\n    });\n\n    db.Follow.findOne({\n        _user: user,\n        _followed: followedUser\n    }).then(async result => {\n        if(result){\n            // result.isDeleted = true;\n            await Promise.all([\n                result.remove(),\n                db.Notifications.findOneAndRemove({\n                    _from: user,\n                    _to: followedUser,\n                    type: 'follow',\n                })\n            ]);\n        } else {\n            await followObj.save();\n            const targetUser = await db.Follow.populate(followObj,{\n                path: '_user',\n                select: ' username firstName lastName displayName thumbnail _id'\n            });\n            await new db.Notifications({\n                _from: user,\n                _to: followedUser,\n                type: 'follow',\n            }).save()\n        }\n        res.status(200).json({\n            success: true,\n        })\n    }).catch(error => {\n        res.status(500).json({\n            success: true,\n            error\n        })\n    })\n};\n\nuserController.getMe = async (req, res) => {\n    const { user } = req;\n    try {\n        if(!req.user) throw new Error('');\n        const me = await db.User.findById(user.id);\n        if(!me) throw new Error('Invalid signature');\n        res.status(200).json({\n            success: true,\n            me\n        })\n    } catch(error) {\n        res.status(403).json({\n            success: false,\n            message: error.message\n        });\n    }\n};\n\nuserController.updateProfile = async (req, res) => {\n    const { data } = req.body;\n    try {\n        // new: true => return the updated object\n        const user = await db.User.findByIdAndUpdate(req.user.id, { ...data }, {new: true});\n        res.status(200).json({\n            success: true,\n            user\n        });\n    } catch (e) {\n        res.status(500).send({\n            error: e.message\n        });\n    }\n};\n\nuserController.getUserStories = async (req, res)  => {\n    const { username } = req.params;\n    const { page } = req.query;\n    try {\n        const user = await db.User.findOne({ username });\n        const stories = await db.Story\n            .paginate({\n                    _creator: user._id,\n                    isDeleted: false,\n                    membersOnly: false\n                },\n                {\n                    select: '-tags',\n                    sort: {\n                        createdAt: -1\n                    },\n                    page,\n                    limit: 6\n                });\n        res.status(200).json({\n            success: true,\n            ...stories\n        })\n    } catch (e) {\n        res.status(500).json({\n            error: e.message\n        })\n    }\n}\n\nuserController.getUserResponses = async (req, res) => {\n    const { username } = req.params;\n    const { page } = req.query;\n    try {\n        const user = await db.User.findOne({ username });\n        const responses = await db.Response\n            .paginate(\n                {\n                    _creator: user._id,\n                    isDeleted: false,\n                },\n                {\n                    sort: {\n                        createdAt: -1\n                    },\n                    populate: '_story',\n                    page: page || 1,\n                    limit: 6\n                });\n        res.status(200).json({\n            success: true,\n            ...responses\n        })\n    } catch (e) {\n        res.status(500).json({\n            success: false,\n            error: e.message\n        })\n    }\n\n};\n\nuserController.getFollowers = async (req, res) => {\n    const { id } = req.params;\n    const { page } = req.query;\n    try {\n        const users = await db.Follow.paginate(\n            { _followed: id },\n            { sort: {createdAt: 1}, page: page || 1, limit: 6 }\n        );\n        res.status(200).json({\n            ...users\n        })\n    } catch (e) {\n        res.status(500).json({\n            success: false,\n            error: e.message\n        })\n    }\n};\n\nuserController.getFollowings = async (req, res) => {\n    const { id } = req.params;\n    const { page } = req.query;\n    try {\n        const users = await db.Follow.paginate(\n            { _user: id },\n            { sort: {createdAt: 1}, page: page || 1, limit: 20 }\n        );\n        res.status(200).json({\n            ...users\n        })\n    } catch (e) {\n        res.status(500).json({\n            success: false,\n            error: e.message\n        })\n    }\n};\n\nexport default userController;"]}