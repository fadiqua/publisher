{"version":3,"sources":["../../server/controllers/notificationsController.js"],"names":["notificationsController","markNotificationAsRead","req","res","id","body","Notifications","findByIdAndUpdate","isClicked","status","json","success","update","isRead","multiple","send","error","clearUnreadBadgeCount","_to","user","$set","multi","getUnreadCount","count","e","getNotifications","page","query","paginate","sort","createdAt","limit","notifications","getNotificationById","params","findById","notification","toString","Error","message"],"mappings":";;;;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,0BAA0B,EAAhC;;AAEAA,wBAAwBC,sBAAxB;AAAA,0EAAiD,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACrCC,0BADqC,GAC9BF,IAAIG,IAD0B,CACrCD,EADqC;AAAA;;AAAA,6BAGtCA,EAHsC;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAI/B,gBAAGE,aAAH,CAAiBC,iBAAjB,CAAmCH,EAAnC,EAAuC,EAAEI,WAAW,IAAb,EAAvC,CAJ+B;;AAAA;AAKrCL,4BAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS;AADQ,yBAArB;AALqC;AAAA;;AAAA;AAAA;AAAA,+BAShC,gBAAGL,aAAH,CAAiBM,MAAjB,CAAwB,EAACJ,WAAW,KAAZ,EAAxB,EAA4C;AAC7CA,uCAAW,IADkC;AAE7CK,oCAAQ;AAFqC,yBAA5C,EAGF,EAAEC,UAAU,IAAZ,EAHE,CATgC;;AAAA;AAarCX,4BAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS;AADQ,yBAArB;;AAbqC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAkBzCR,4BAAIM,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AACjBJ,qCAAS,KADQ;AAEjBK;AAFiB,yBAArB;;AAlByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjD;;AAAA;AAAA;AAAA;AAAA;AAwBAhB,wBAAwBiB,qBAAxB;AAAA,2EAAgD,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAElC,gBAAGG,aAAH,CAAiBM,MAAjB,CAAwB,EAAEM,KAAIhB,IAAIiB,IAAJ,CAASf,EAAf,EAAmBS,QAAQ,KAA3B,EAAxB,EAA2D,EAACO,MAAM,EAACP,QAAQ,IAAT,EAAP,EAA3D,EAAmF,EAAEQ,OAAO,IAAT,EAAnF,CAFkC;;AAAA;AAGxClB,4BAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS;AADQ,yBAArB;AAHwC;AAAA;;AAAA;AAAA;AAAA;;AAOxCR,4BAAIM,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AACjBJ,qCAAS;AADQ,yBAArB;;AAPwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhD;;AAAA;AAAA;AAAA;AAAA;AAYAX,wBAAwBsB,cAAxB;AAAA,2EAAyC,kBAAOpB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACrC,4BAAI;AACA;AACAA,gCAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,yCAAS,IADQ;AAEjBY,uCAAO;AAFU,6BAArB;AAIH,yBAND,CAME,OAAOC,CAAP,EAAU;AACRrB,gCAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,yCAAS;AADQ,6BAArB;AAGH;;AAXoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzC;;AAAA;AAAA;AAAA;AAAA;;AAcAX,wBAAwByB,gBAAxB;AAAA,2EAA2C,kBAAOvB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BuB,4BAD+B,GACtBxB,IAAIyB,KADkB,CAC/BD,IAD+B;AAAA;AAAA;AAAA,+BAGP,gBAAGpB,aAAH,CAAiBsB,QAAjB,CAA0B,EAACV,KAAKhB,IAAIiB,IAAJ,CAASf,EAAf,EAA1B,EACxB,EAAEyB,MAAM,EAAEC,WAAW,CAAC,CAAd,EAAR,EAA2BJ,MAAMA,QAAQ,CAAzC,EAA4CK,OAAO,EAAnD,EADwB,CAHO;;AAAA;AAG7BC,qCAH6B;;AAKnC7B,4BAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,mBACOsB,aADP;AALmC;AAAA;;AAAA;AAAA;AAAA;;AASnC7B,4BAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS;AADQ,yBAArB;;AATmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3C;;AAAA;AAAA;AAAA;AAAA;;AAgBAX,wBAAwBiC,mBAAxB;AAAA,2EAA8C,kBAAO/B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE9BC,0BAF8B,GAEvBF,IAAIgC,MAFmB,CAE9B9B,EAF8B;AAAA;AAAA,+BAGX,gBAAGE,aAAH,CAAiB6B,QAAjB,CAA0B/B,EAA1B,CAHW;;AAAA;AAGhCgC,oCAHgC;;AAAA,8BAInClC,IAAIiB,IAAJ,CAASf,EAAT,KAAgBgC,aAAalB,GAAb,CAAiBmB,QAAjB,EAJmB;AAAA;AAAA;AAAA;;AAAA,8BAIgB,IAAIC,KAAJ,CAAU,yBAAV,CAJhB;;AAAA;AAKtCnC,4BAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,qCAAS,IADQ;AAEjByB;AAFiB,yBAArB;AALsC;AAAA;;AAAA;AAAA;AAAA;;AAUtCjC,4BAAIM,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AACjBJ,qCAAS,KADQ;AAEjBK,mCAAO,aAAEuB;AAFQ,yBAArB;;AAVsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9C;;AAAA;AAAA;AAAA;AAAA;;kBAiBevC,uB","file":"notificationsController.js","sourcesContent":["import db from '../models/index';\n\nconst notificationsController = {};\n\nnotificationsController.markNotificationAsRead = async (req, res) => {\n    const { id } = req.body;\n    try {\n        if(id) {\n            await db.Notifications.findByIdAndUpdate(id, { isClicked: true})\n            res.status(200).json({\n                success: true\n            })\n        } else {\n           await db.Notifications.update({isClicked: false}, {\n                isClicked: true,\n                isRead: true\n            }, { multiple: true})\n            res.status(200).json({\n                success: true\n            })\n        }\n    } catch(error) {\n        res.status(500).send({\n            success: false,\n            error\n        })\n    }\n};\nnotificationsController.clearUnreadBadgeCount = async (req, res) => {\n    try {\n        await db.Notifications.update({ _to:req.user.id, isRead: false}, {$set: {isRead: true}}, { multi: true})\n        res.status(200).json({\n            success: true\n        })\n    } catch (e) {\n        res.status(500).send({\n            success: false\n        })\n    }\n};\nnotificationsController.getUnreadCount = async (req, res) => {\n    try {\n        // const count = await db.Notifications.find({ _to: req.user.id, isRead: false }).count();\n        res.status(200).json({\n            success: true,\n            count: 0\n        })\n    } catch (e) {\n        res.status(500).json({\n            success: true\n        })\n    }\n};\n\nnotificationsController.getNotifications = async (req, res) => {\n    const { page } = req.query;\n    try  {\n        const notifications = await db.Notifications.paginate({_to: req.user.id,},\n            { sort: { createdAt: -1 }, page: page || 1, limit: 12});\n        res.status(200).json({\n            ...notifications\n        })\n    } catch(e) {\n        res.status(500).json({\n            success: false\n        })\n    }\n\n};\n\nnotificationsController.getNotificationById = async (req, res) => {\n    try {\n        const { id } = req.params;\n        const notification = await db.Notifications.findById(id);\n        if(req.user.id !== notification._to.toString()) throw new Error('invalid notification id');\n        res.status(200).json({\n            success: true,\n            notification\n        })\n    } catch (e) {\n        res.status(500).send({\n            success: false,\n            error: e.message\n        })\n    }\n};\n\nexport default notificationsController;"]}