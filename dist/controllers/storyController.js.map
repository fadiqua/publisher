{"version":3,"sources":["../../server/controllers/storyController.js"],"names":["storyController","storyFields","post","req","res","body","title","description","content","count","tags","cover","topicId","membersOnly","length","Error","story","Story","_topic","_creator","user","id","save","newStory","Promise","all","populate","path","select","User","findByIdAndUpdate","draft","ns","status","json","success","message","get","slug","params","findOne","virtuals","toObject","isUserLiked","_likes","find","toString","isOwner","_id","error","updateStory","findOneAndUpdate","new","updatedStory","send","deleteStory","query","isDeleted","deletedStory","getById","findById","getAll","stories","data","getHomePageData","Topic","topics","map","topic","sort","createdAt","limit","t","filter","getStoriesByTopic","page","sortby","pageSize","topicObj","sortBy","aggregate","paginateRecords","match","project","getPopularStories","getStoriesByTag","tag","regex","RegExp","paginate","$in"],"mappings":"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","file":"storyController.js","sourcesContent":["import db from '../models/index';\n\nconst  storyController = {};\n\nconst storyFields = {\n    \"title\": 1,\n    \"slug\": 1,\n    \"content\": 1,\n    \"_creator\": 1,\n    \"_topic\": 1,\n    \"isDeleted\": 1,\n    \"_comments\": 1,\n    \"createdAt\": 1,\n    \"cover\": 1,\n    \"_likes\": 1,\n};\n\n\nstoryController.post =  async (req, res) => {\n    const {\n        title, description, content,\n        count, tags, cover, topicId,\n        membersOnly\n    } = req.body;\n    try {\n        // start validation\n        if(!title || title.length < 8 || title.length > 100) {\n            throw new Error('Title must be between 8 and 100 characters.');\n        }\n        else if (!description || description.length < 20 || description.length > 240 ) {\n            throw new Error('Description must be between 20 and 240 characters.');\n        }\n        else if (!content || content.length < 5){\n            throw new Error('Content must be between 20 and 240 characters.');\n        }\n        else if (!cover) {\n            throw new Error('Cover is required');\n        }\n        else if (!tags || !tags.length) {\n            throw new Error('Tags is required');\n        }\n        else if (!topicId) {\n            throw new Error('Topic is missing');\n        }\n        // end validation\n        const story = new db.Story({\n            title, content, count,\n            tags, cover, description,\n            membersOnly,\n            _topic: topicId,\n            _creator: req.user.id\n        });\n        let newStory = await story.save();\n        const [ns] = await Promise.all([\n            db.Story.populate(newStory, {\n                path: '_topic',\n                select: '-_id -icon'\n            }),\n            db.User.findByIdAndUpdate(req.user.id, { draft: null })\n        ]);\n        res.status(201).json({\n            success: true,\n            story: ns\n        });\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: err.message\n        })\n    }\n\n};\n\nstoryController.get = async (req, res) => {\n    const { user } = req;\n    try {\n        const { slug } = req.params;\n        const story = (await db.Story.findOne({ slug })).toObject({virtuals: true});\n        story.isUserLiked = false;\n        if(user) {\n            story.isUserLiked = !!story._likes.find(id => id.toString() === user.id)\n        }\n        story.isOwner = user && user.id == story._creator._id;\n        res.status(200).json({\n            success: true,\n            story\n        })\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            error: error.message\n        })\n    }\n\n};\n\nstoryController.updateStory = async (req, res) => {\n    const { id, story } = req.body;\n    try {\n        // if(story._creator._id.toString() !== req.user.id)\n        //     throw new Error(`You don't have a privilege`);\n\n        const updatedStory = await db.Story.findOneAndUpdate(\n            {\n                _id: id,\n                _creator: req.user.id\n            },\n            story,\n            { new: true }\n            ).populate('_topic');\n        if(!updatedStory)\n            throw new Error(\"Maybe the story is deleted or you aren\\'t the owner or Poor connection\");\n        res.status(201).json({\n            success: true,\n            story: updatedStory\n        });\n    } catch (err) {\n        res.status(500).send({\n            success: false,\n            message: err.message\n        })\n    }\n};\n\nstoryController.deleteStory = async (req, res) => {\n    const { id } = req.query;\n    try {\n        const deletedStory =  await db.Story.findOneAndUpdate(\n            { _id: id, _creator: req.user.id },\n            { isDeleted: true }\n            );\n\n        if(!deletedStory)\n            throw new Error(`You don't have a permission`);\n\n        res.status(200).send({\n            success: true\n        })\n    } catch (err) {\n        res.status(500).send({\n            message: err.message\n        })\n    }\n};\n\nstoryController.getById = async (req, res) => {\n    try {\n        const { id } = req.params;\n        const story = await db.Story.findById(id);\n        res.status(200).json({\n            success: true,\n            story\n        })\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            error: error.message\n        })\n    }\n\n};\n\nstoryController.getAll = async (req, res) => {\n    try {\n        const stories = await db.Story.find({}).populate({\n            path: '_creator',\n            select: 'username -_id'\n\n        });\n        res.status(200).json({\n            success: true,\n            data: stories\n        })\n    } catch (error) {\n        res.status(500).json({\n            success: false\n        })\n    }\n};\n\nstoryController.getHomePageData = async (req, res) => {\n    const topics = await db.Topic.find({});\n    const params = {};\n    if(!req.user){\n        params[\"membersOnly\"] = false;\n    }\n    const data = (await Promise.all(topics.map(topic =>\n        db.Story.find({_topic: topic._id, ...params }).sort({createdAt: 1}).limit(4))))\n        .filter(t => t.length > 0);\n    res.status(200).send({\n        stories: data\n    });\n};\n\nstoryController.getStoriesByTopic = async (req, res) => {\n    const { topic, page=1, sortby } = req.query;\n    let stories;\n    let pageSize = 9;\n    let params = {};\n    params['isDeleted'] = false;\n    if(!req.user) {\n        params['membersOnly'] = false\n    }\n    const topicObj = await db.Topic.findOne({slug: topic });\n    let sortBy = sortby || 'date';\n    let sort = {};\n    if(sortBy === 'date'){\n        sort['createdAt'] = 1\n    } else {\n        sort[\"commentsCount\"] = -1;\n        sort[\"likesCount\"] = -1;\n        sort['createdAt'] = 1\n    }\n    const aggregate = db.Story.aggregate();\n    if(topicObj !== null) {\n        params['_topic'] = topicObj._id;\n        const stories = await db.Story.paginateRecords(aggregate,{\n                match: params,\n                project: {\n                    ...storyFields,\n                    \"commentsCount\": { \"$size\": \"$_comments\" },\n                    \"likesCount\": { \"$size\": \"$_likes\" }\n                },\n                sort,\n                page,\n                pageSize\n            },\n            ['_creator', '_topic']\n        );\n        res.status(200).json({\n            success: true,\n            stories\n        })\n    }\n    else if (topic === 'members-only'){\n        if(!req.user) {\n            res.status(401).json({\n                success: false,\n                error: 'Authentication is not provided'\n            });\n        } else {\n            stories = await db.Story.paginateRecords(aggregate,{\n                    match: params,\n                    project: {\n                        ...storyFields,\n                        \"commentsCount\": { \"$size\": \"$_comments\" },\n                        \"likesCount\": { \"$size\": \"$_likes\" }\n                    },\n                    sort,\n                    page,\n                    pageSize\n                },\n                ['_creator', '_topic']\n            );\n            res.status(200).json({\n                success: true,\n                stories\n            })\n        }\n\n    }\n    else {\n        res.status(500).json({\n            success: false,\n            error: 'Not valid topic'\n        })\n    }\n\n};\n\nstoryController.getPopularStories = async (req, res) => {\n    const { page } = req.query;\n    const pageSize = 9;\n    const aggregate = db.Story.aggregate();\n    const data = await db.Story.paginateRecords(aggregate,{\n            match: { \"isDeleted\": false },\n            project: {\n                ...storyFields,\n                \"commentsCount\": { \"$size\": \"$_comments\" },\n                \"likesCount\": { \"$size\": \"$_likes\" }\n            },\n            sort: { \"commentsCount\": -1 , \"likesCount\": -1, \"createdAt\": 1 },\n            page,\n            pageSize\n        },\n        ['_creator', '_topic']\n    );\n    res.status(200).json({\n        success: true,\n        stories: data\n\n    })\n};\n\nstoryController.getStoriesByTag =  async (req, res) => {\n    const  { tag='' } = req.params;\n    const { page=1 } = req.query;\n    // const regex = new RegExp(`/(^|\\W)${tag}($|\\W)/i`);\n    const regex = new RegExp(`^${tag}\\\\s?`);\n    // db.tags.aggregate(\n    //     {$unwind:\"$tags\"},\n    //     {$group: { _id:\"$tags\", score:{\"$sum\":1} } },\n    //     {$out:\"tagStats\"}\n    // )\n    const params = {};\n    params['isDeleted'] = false;\n    if(!req.user.id) params['membersOnly'] = true;\n    const stories = await db.Story.paginate({\n        ...params,\n        tags: {\n            $in: [regex]\n        }\n    },{\n        sort: {\n            createdAt: -1\n        },\n        page,\n        limit: 10\n    });\n\n    res.status(200).json({\n        stories\n    })\n};\n\nexport default storyController;"]}