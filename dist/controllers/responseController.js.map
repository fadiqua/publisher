{"version":3,"sources":["../../server/controllers/responseController.js"],"names":["commentController","post","req","res","body","text","storyId","userId","parentId","comment","Response","_story","_creator","_parent","save","newComment","undefined","Promise","all","Story","findByIdAndUpdate","$push","_id","populate","path","select","result","toString","Notifications","_from","_to","type","_parentTarget","_target","console","log","$inc","repliesCount","c","status","json","success","error","message","get","params","page","query","paginate","isDeleted","sort","createdAt","limit","comments","delete","id","promises","$pull","_comments","push","send","update","then","catch","getUserResponses","username","User","findOne","user","responses","getReponseById","responseId","findById","response","getReplies"],"mappings":"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","file":"responseController.js","sourcesContent":["import db from '../models/index';\nimport server from '../index';\n\nconst  commentController = {};\n\ncommentController.post = async (req, res) => {\n    const { text, storyId, userId, parentId } = req.body;\n    const comment = new db.Response({\n        text,\n        _story: storyId ,\n        _creator: userId,\n        _parent: parentId || null\n    });\n    try {\n        let newComment = await comment.save();\n        if(parentId == undefined){\n            let result = await Promise.all([\n                db.Story.findByIdAndUpdate(\n                    storyId,\n                    { $push: { '_comments': newComment._id }}\n                ),\n                db.Response.populate(newComment, {\n                    path: \"_creator\",\n                    select: '-password -createdAt -facebook'\n                })\n            ]);\n            {/*<a class=\"primary-color\" href=\"/profile/${result[1]._creator._id}\">*/}\n            if(userId !== result[0]._creator.toString()){\n                await new db.Notifications({\n                    _from: userId,\n                    _to: result[0]._creator,\n                    type: 'comment',\n                    _parentTarget:  result[0]._id,\n                    _target:  result[1]._id\n                }).save();\n            }\n        }\n        else {\n            console.log('parentId ', parentId)\n            await db.Response.findByIdAndUpdate(parentId, { $inc: { repliesCount: 1}})\n        }\n        let c = await db.Response.populate(newComment, {\n            path: '_creator',\n            select: '-_following -_followers -facebook -google'\n        });\n        res.status(200).json({\n            success: true,\n            comment: c,\n        })\n    } catch (e) {\n        res.status(500).json({\n            success: false,\n            error: e.message\n        })\n    }\n};\n\ncommentController.get = async (req, res) => {\n    const { storyId } = req.params;\n    const { page } = req.query;\n    // console.log('storyId ', storyId);\n    try {\n        const comments = await db.Response\n            .paginate({\n                _story: storyId,\n                isDeleted: false,\n                _parent: null\n            },{\n                sort: {\n                    createdAt: -1\n                },\n                populate: '_story',\n                page: page || 1,\n                limit: 2\n            });\n        res.status(200).json({\n            ...comments\n        });\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            error: error.message\n        })\n    }\n};\n\ncommentController.delete = async (req, res) => {\n    const { id, storyId, parentId } = req.query;\n    try {\n        let promises = [\n            db.Response.findByIdAndUpdate(id, {\n                isDeleted: true\n            }),\n            db.Story.findByIdAndUpdate(storyId, { $pull: { _comments: id}}),\n        ];\n        if(parentId){\n            promises.push(db.Response.findByIdAndUpdate(parentId, { $inc: { repliesCount: -1}}))\n        }\n        await Promise.all(promises);\n        res.status(200).send({\n            success: true\n        })\n    } catch (e) {\n        res.status(500).send({\n            success: false,\n            error: e.message\n        })\n    }\n};\ncommentController.update = (req, res) => {\n    const { id, text } = req.body;\n    if(id && text) {\n        db.Response.findByIdAndUpdate(id,{text})\n            .then(comment => {\n                res.status(200).json({\n                    success: true,\n                    comment\n                })\n            })\n            .catch(error => {\n                res.status(500).send({\n                    success: false,\n                    error\n                })\n            })\n    } else {\n        res.status(500).send({\n            success: false,\n            error: 'no comment id and comment creator.'\n        })\n    }\n\n};\n\ncommentController.getUserResponses = async (req, res) => {\n    const { username } = req.params;\n    const { page } = req.query;\n    try {\n        const user = await db.User.findOne({ username });\n        const responses = await db.Response\n            .paginate(\n                {\n                    _creator: user._id,\n                    isDeleted: false,\n                },\n                {\n                    sort: {\n                        createdAt: -1\n                    },\n                    populate: '_story',\n                    page: page || 1,\n                    limit: 6\n                });\n        res.status(200).json({\n            ...responses\n        })\n    } catch (e) {\n        res.status(500).json({\n            success: false,\n            error: e.message\n        })\n    }\n\n};\n\ncommentController.getReponseById = async (req, res) => {\n    try {\n        const { responseId } = req.params;\n        const response = await db.Response.findById(responseId).populate({\n            path: '_creator',\n            select: 'thumbnail username firstName lastName _id'\n        });\n        res.status(200).json({\n            response\n        })\n    } catch (e) {\n        res.status(500).send({\n            error: e.message\n        })\n    }\n};\ncommentController.getReplies = async (req, res) => {\n    try {\n        const { responseId } = req.params;\n        const { page } = req.query;\n        const response = await db.Response\n            .paginate(\n                {\n                    _parent: responseId,\n                    isDeleted: false\n                },\n                {\n                    sort: {\n                        createdAt: -1\n                    },\n                    populate: '_story',\n                    page: page || 1,\n                    limit: 6\n                });\n        res.status(200).json({\n            ...response\n        })\n    } catch (e) {\n        res.status(500).send({\n            error: e.message\n        })\n    }\n}\nexport default commentController;"]}