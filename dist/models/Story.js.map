{"version":3,"sources":["../../server/models/Story.js"],"names":["storySchema","title","type","String","required","minlength","maxlength","trim","slug","unique","description","content","isDeleted","Boolean","default","createdAt","Date","now","cover","tags","_topic","ObjectId","ref","count","Number","readTime","_creator","membersOnly","_comments","_likes","toJSON","virtuals","index","virtual","get","commentsCount","length","likesCount","autoPopulate","next","where","populate","path","select","plugin","pre","story","generateUniqueSlug","generatedSlug","console","log","methods","Story","model","Promise","resolve","reject","generate","findOne","exists","Math","floor","random","toLowerCase","err"],"mappings":"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","file":"Story.js","sourcesContent":["import mongoose , { Schema } from 'mongoose';\nimport mongoosePaginate from 'mongoose-paginate';\nimport paginateRecords from '../plugins/paginateRecords';\nimport { avgWordsPerMin } from '../utils/functions';\nimport slugify from 'slugify';\nimport arslugify from 'arslugify';\n\nconst storySchema = new Schema({\n    title: {\n        type: String,\n        required: true,\n        minlength: [8, 'Title at least 8 characters or more.'],\n        maxlength: [100, 'Title exceeds 100 characters'],\n        trim: true\n    },\n    slug: {\n        type: String,\n        unique: true\n    },\n    description: {\n        type: String,\n        required: true,\n        minlength: [20, 'description at least 20 characters or more.'],\n        maxlength: [240, 'description exceeds 240 characters'],\n        trim: true\n    },\n    content: {\n        type: String,\n        required: true,\n        minlength: [5, 'content must be 5 characters or more.'],\n    },\n    isDeleted: {\n        type: Boolean,\n        default: false\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now\n    },\n    cover: {\n        required: true,\n        type: String\n    },\n    tags: [String],\n    _topic: {\n        type: Schema.ObjectId,\n        ref: 'Topic',\n        required: true,\n    },\n    count: {\n        type: Number\n    },\n    readTime: {\n        type: Number,\n        default: 1\n    },\n    _creator: {\n        required: true,\n        type: Schema.ObjectId, ref:'User'\n    },\n    membersOnly: {\n        type: Boolean,\n        default: false\n    },\n    _comments: [{ type: Schema.ObjectId, ref:'Response' }],\n    _likes: [{ type: Schema.ObjectId, ref:'Like' }]\n}, { toJSON: { virtuals: true }});\n\nstorySchema.index({title: 'text', content:'text', tags: 'text'});\n\nstorySchema.virtual('commentsCount').get(function () {\n    const commentsCount = this._comments.length;\n    this._comments = [];\n    return commentsCount;\n});\n\nstorySchema.virtual('likesCount').get(function () {\n    const likesCount = this._likes.length;\n    this._likes = [];\n    return likesCount;\n});\n\nconst autoPopulate = function (next) {\n    this.where({isDeleted: false})\n        .populate({\n        path: '_creator',\n        select: 'thumbnail username firstName lastName _id'\n    }).populate({\n        path: '_topic',\n        select: 'name slug _id'\n    });\n    next()\n};\n\nstorySchema.plugin(mongoosePaginate);\n\nstorySchema.plugin(paginateRecords);\n\nstorySchema.pre('save', async function (next) {\n    const story = this;\n    try {\n        const generatedSlug = await story.generateUniqueSlug(story.title);\n        story.slug = generatedSlug;\n        story.readTime = avgWordsPerMin(story.count);\n        next();\n    } catch (err) {\n        next(err);\n    }\n\n});\n\nstorySchema.pre('findOneAndUpdate', function (next) {\n    const story = this;\n    console.log('sstoryyy ', story.count)\n    story.readTime = avgWordsPerMin(story.count);\n    next();\n});\n\nstorySchema.pre('findOne', autoPopulate);\nstorySchema.pre('find', autoPopulate);\n\nstorySchema.methods.generateUniqueSlug = async function (title) {\n    const Story =  mongoose.model('Story');\n    let slug = slugify(title);\n    if(!slug) slug = arslugify(title); // for other languages like arabic\n    return new Promise( async (resolve, reject) => {\n        const generate = async slug => {\n            const exists = await Story.findOne({ slug });\n            if(exists !== null) {\n                generate(`${slug}-${Math.floor(Math.random()*10 + 1)}`)\n            } else {\n                resolve(slug)\n            }\n        };\n        try {\n            generate(slug.toLowerCase())\n        } catch (err) {\n            reject(err)\n        }\n    });\n};\n\nconst Story = mongoose.model('Story', storySchema);\n\nexport default Story;\n"]}