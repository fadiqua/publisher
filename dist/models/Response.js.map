{"version":3,"sources":["../../server/models/Response.js"],"names":["responseSchema","text","type","String","required","minlength","isDeleted","Boolean","default","isEdited","createdAt","Date","now","_creator","ObjectId","ref","_story","repliesCount","Number","min","integer","_parent","_likes","toJSON","virtuals","virtual","get","likesCount","length","autoPopulateCreator","next","populate","path","select","where","equals","pre","plugin","Response","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB,qBAAW;;AAE9BC,UAAM;AACFC,cAAMC,MADJ;AAEFC,kBAAU,IAFR;AAGFC,mBAAW,CAAC,CAAD,EAAI,uCAAJ;AAHT,KAFwB;AAO9BC,eAAW;AACPJ,cAAMK,OADC;AAEPC,iBAAS;AAFF,KAPmB;AAW9BC,cAAU;AACNP,cAAMK,OADA;AAENC,iBAAS;AAFH,KAXoB;AAe9BE,eAAW;AACPR,cAAMS,IADC;AAEPH,iBAASG,KAAKC;AAFP,KAfmB;AAmB9BC,cAAU;AACNX,cAAM,iBAAOY,QADP,EACiBC,KAAI;AADrB,KAnBoB;AAsB9BC,YAAQ;AACJd,cAAM,iBAAOY,QADT,EACmBC,KAAI;AADvB,KAtBsB;AAyB9BE,kBAAc,EAAEf,MAAMgB,MAAR,EAAgBV,SAAS,CAAzB,EAA4BW,KAAI,CAAhC,EAAmCC,SAAS,IAA5C,EAzBgB;AA0B9BC,aAAS,EAAEnB,MAAM,iBAAOY,QAAf,EAAyBC,KAAI,UAA7B,EA1BqB;AA2B9BO,YAAQ,CAAC,EAAEpB,MAAM,iBAAOY,QAAf,EAAyBC,KAAI,MAA7B,EAAD;AA3BsB,CAAX,EA4BrB,EAAEQ,QAAQ,EAAEC,UAAU,IAAZ,EAAV,EA5BqB,CAAvB;;AA8BA;AACAxB,eAAeyB,OAAf,CAAuB,YAAvB,EAAqCC,GAArC,CAAyC,YAAY;AACjD,QAAMC,aAAa,KAAKL,MAAL,CAAYM,MAA/B;AACA,SAAKN,MAAL,GAAc,EAAd;AACA,WAAOK,UAAP;AACH,CAJD;;AAOA,IAAME,sBAAsB,SAAtBA,mBAAsB,CAASC,IAAT,EAAe;AACvC,SAAKC,QAAL,CAAc;AACVC,cAAM,UADI;AAEVC,gBAAQ;AAFE,KAAd;AAIA,SAAKC,KAAL,CAAW,WAAX,EAAwBC,MAAxB,CAA+B,KAA/B;AACAL;AACH,CAPD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9B,eAAeoC,GAAf,CAAmB,UAAnB,EAA+BP,mBAA/B;AACA7B,eAAeoC,GAAf,CAAmB,MAAnB,EAA2BP,mBAA3B;AACA7B,eAAeoC,GAAf,CAAmB,mBAAnB,EAAwC,UAAUN,IAAV,EAAgB;AACpD,QAAG,KAAKb,YAAL,GAAoB,CAAvB,EAA0B;AACtB,aAAKA,YAAL,GAAoB,CAApB;AACH;AACDa;AACH,CALD;AAMA9B,eAAeqC,MAAf;;AAEA,IAAMC,WAAW,mBAASC,KAAT,CAAe,UAAf,EAA2BvC,cAA3B,CAAjB;;kBAEesC,Q","file":"Response.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\nimport mongoosePaginate from 'mongoose-paginate';\n\nconst responseSchema = new Schema({\n\n    text: {\n        type: String,\n        required: true,\n        minlength: [5, 'content must be 5 characters or more.'],\n    },\n    isDeleted: {\n        type: Boolean,\n        default: false\n    },\n    isEdited: {\n        type: Boolean,\n        default: false\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now\n    },\n    _creator: {\n        type: Schema.ObjectId, ref:'User'\n    },\n    _story: {\n        type: Schema.ObjectId, ref:'Story'\n    },\n    repliesCount: { type: Number, default: 0, min:0, integer: true },\n    _parent: { type: Schema.ObjectId, ref:'Response' },\n    _likes: [{ type: Schema.ObjectId, ref:'Like' }]\n},{ toJSON: { virtuals: true }});\n\n// await mongoose.model('Comment').find({_parent: model._id}).count();\nresponseSchema.virtual('likesCount').get(function () {\n    const likesCount = this._likes.length;\n    this._likes = [];\n    return likesCount;\n});\n\n\nconst autoPopulateCreator = function(next) {\n    this.populate({\n        path: '_creator',\n        select: 'thumbnail username firstName lastName _id'\n    });\n    this.where('isDeleted').equals(false);\n    next()\n};\n// responseSchema.virtual('repliesCount',  {\n//     ref: 'Comment',\n//     localField: '_id',\n//     foreignField: '_parent'\n// })\n//     .get(async function() {\n//     mongoose.model('Comment').count({_parent: this._id})\n//         .then(count => {\n//             console.log('count ', count);\n//             return count\n//         })\n//         .catch(error => {\n//             return 0\n//         })\n// });\nresponseSchema.pre('findById', autoPopulateCreator);\nresponseSchema.pre('find', autoPopulateCreator);\nresponseSchema.pre('findByIdAndUpdate', function (next) {\n    if(this.repliesCount < 0) {\n        this.repliesCount = 0;\n    }\n    next();\n});\nresponseSchema.plugin(mongoosePaginate);\n\nconst Response = mongoose.model('Response', responseSchema);\n\nexport default Response;\n"]}