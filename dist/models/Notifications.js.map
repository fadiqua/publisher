{"version":3,"sources":["../../server/models/Notifications.js"],"names":["notificationsSchema","_from","type","ObjectId","ref","_to","String","content","_parentTarget","_target","isRead","Boolean","default","isClicked","isDeleted","createdAt","Date","now","autoPopulate","next","populate","path","select","plugin","pre","post","model","then","io","emit","notification","data","console","log","_id","Notifications"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,sBAAsB,qBAAW;AACnCC,WAAO;AACHC,cAAM,iBAAOC,QADV,EACoBC,KAAI;AADxB,KAD4B;AAInCC,SAAK;AACDH,cAAM,iBAAOC,QADZ,EACsBC,KAAI;AAD1B,KAJ8B;AAOnCF,UAAM;AACFA,cAAMI;AADJ,KAP6B;AAUnCC,aAAS;AACLL,cAAMI;AADD,KAV0B;AAanCE,mBAAe;AACXN,cAAM,iBAAOC,QADF,EACYC,KAAI;AADhB,KAboB;AAgBnCK,aAASH,MAhB0B;AAiBnCI,YAAQ;AACJR,cAAMS,OADF;AAEJC,iBAAS;AAFL,KAjB2B;AAqBnCC,eAAW;AACPX,cAAMS,OADC;AAEPC,iBAAS;AAFF,KArBwB;AAyBnCE,eAAW;AACPZ,cAAMS,OADC;AAEPC,iBAAS;AAFF,KAzBwB;AA6BnCG,eAAW;AACPb,cAAMc,IADC;AAEPJ,iBAASI,KAAKC;AAFP;AA7BwB,CAAX,CAA5B;;AAmCA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,SAAKC,QAAL,CAAc;AACVC,cAAM,OADI;AAEVC,gBAAQ;AAFE,KAAd,EAGGF,QAHH,CAGY,eAHZ;AAIAD;AAEH;AACDnB,oBAAoBuB,MAApB;;AAEAvB,oBAAoBwB,GAApB,CAAwB,MAAxB,EAAgCN,YAAhC;;AAEAlB,oBAAoByB,IAApB,CAAyB,MAAzB,EAAiC,UAACC,KAAD,EAAQP,IAAR,EAAiB;AAC9C,uBAASO,KAAT,CAAe,eAAf,EACKN,QADL,CACcM,KADd,EACoB;AACZ;AACA;AACA;AACJ;AALJ,MAMMC,IANN,CAMW,gBAAQ;AACX,wBAAOC,EAAP,CAAUC,IAAV,uBAAmCH,MAAMrB,GAAzC,EAAgD;AAC5CyB,0BAAcC;AAD8B,SAAhD;AAGP,KAVD;AAWAZ;AACH,CAbD;;AAeAnB,oBAAoByB,IAApB,CAAyB,kBAAzB,EAA6C,UAACC,KAAD,EAAQP,IAAR,EAAiB;AAC1Da,YAAQC,GAAR,CAAY,cAAZ,EAA4BP,MAAMrB,GAAlC;AACA,oBAAOuB,EAAP,CAAUC,IAAV,0BAAsCH,MAAMrB,GAA5C,EAAmD;AAC/CyB,sBAAcJ,MAAMQ;AAD2B,KAAnD;AAGAf;AACH,CAND;;AAQA,IAAMgB,gBAAgB,mBAAST,KAAT,CAAe,eAAf,EAAgC1B,mBAAhC,CAAtB;;kBAEemC,a","file":"Notifications.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\nimport mongoosePaginate from 'mongoose-paginate';\n\nimport server from '../index';\n\nconst notificationsSchema = new Schema({\n    _from: {\n        type: Schema.ObjectId, ref:'User'\n    },\n    _to: {\n        type: Schema.ObjectId, ref:'User'\n    },\n    type: {\n        type: String,\n    },\n    content: {\n        type: String,\n    },\n    _parentTarget: {\n        type: Schema.ObjectId, ref:'Story'\n    },\n    _target: String,\n    isRead: {\n        type: Boolean,\n        default: false\n    },\n    isClicked: {\n        type: Boolean,\n        default: false\n    },\n    isDeleted: {\n        type: Boolean,\n        default: false\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now\n    }\n});\n\nfunction autoPopulate(next) {\n    this.populate({\n        path: \"_from\",\n        select: 'thumbnail username firstName lastName displayName _id'\n    }).populate('_parentTarget');\n    next()\n\n}\nnotificationsSchema.plugin(mongoosePaginate);\n\nnotificationsSchema.pre('find', autoPopulate);\n\nnotificationsSchema.post('save', (model, next) => {\n    mongoose.model('Notifications')\n        .populate(model,'_from _parentTarget'\n            // {\n            // path: \"_from\",\n            // select: 'thumbnail username firstName lastName _id'\n        // }\n        ).then(data => {\n            server.io.emit(`notification.new_${model._to}`, {\n                notification: data\n            });\n    });\n    next();\n});\n\nnotificationsSchema.post('findOneAndRemove', (model, next) => {\n    console.log('remove noti ', model._to);\n    server.io.emit(`notification.remove_${model._to}`, {\n        notification: model._id\n    });\n    next();\n});\n\nconst Notifications = mongoose.model('Notifications', notificationsSchema);\n\nexport default Notifications;"]}