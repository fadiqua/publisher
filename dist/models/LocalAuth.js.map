{"version":3,"sources":["../../server/models/LocalAuth.js"],"names":["localAuthSchema","email","type","String","password","minlength","user","ObjectId","ref","pre","next","salt","hash","methods","comparePassword","condidatePassword","callback","compare","err","isMatch","statics","createLocalUser","firstName","lastName","localObj","UserModel","model","userObj","Promise","resolve","reject","generateUniqueUserName","username","save","newUser","_id","LocalAuth"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,kBAAkB,qBAAW;AAC/BC,WAAO;AACHC,cAAMC;AADH,KADwB;AAI/BC,cAAU;AACNF,cAAMC,MADA;AAENE,mBAAW,CAAC,CAAD,EAAI,wCAAJ;AAFL,KAJqB;AAQ/BC,UAAM,EAAEJ,MAAM,iBAAOK,QAAf,EAAyBC,KAAI,MAA7B;AARyB,CAAX,CAAxB;;AAWA;AACA;;;AAGA;AACAR,gBAAgBS,GAAhB,CAAoB,MAApB;AAAA,0EAA4B,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBJ,4BADkB,GACX,IADW;AAAA;AAAA;AAAA,+BAGD,4BAAaA,KAAKF,QAAlB,CAHC;;AAAA;AAGdO,4BAHc;AAAA;AAAA,+BAID,iBAAOC,IAAP,CAAYN,KAAKF,QAAjB,EAA2BO,IAA3B,CAJC;;AAAA;AAIdC,4BAJc;;AAKpBN,6BAAKF,QAAL,GAAgBQ,IAAhB;AACAF;;AANoB;AAAA;;AAAA;AAAA;AAAA;;AASpBA;;AAToB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA5B;;AAAA;AAAA;AAAA;AAAA;;AAaA;AACAV,gBAAgBa,OAAhB,CAAwBC,eAAxB,GAA0C,UAAUC,iBAAV,EAA6BC,QAA7B,EAAuC;AAC7E,qBAAOC,OAAP,CAAeF,iBAAf,EAAkC,KAAKX,QAAvC,EAAiD,UAAUc,GAAV,EAAeC,OAAf,EAAwB;AACrE,YAAID,GAAJ,EAASF,SAASE,GAAT;AACTF,iBAAS,IAAT,EAAeG,OAAf;AACH,KAHD;AAIH,CALD;;AAOAnB,gBAAgBoB,OAAhB,CAAwBC,eAAxB;AAAA,2EAA0C;AAAA;;AAAA,YAAkBC,SAAlB,SAAkBA,SAAlB;AAAA,YAA6BC,QAA7B,SAA6BA,QAA7B;AAAA,YAAuCnB,QAAvC,SAAuCA,QAAvC;AAAA,YAAiDH,KAAjD,SAAiDA,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAChCuB,gCADgC,GACrB,IAAI,IAAJ,CAAS,EAAEvB,YAAF,EAASG,kBAAT,EAAT,CADqB;AAEhCqB,iCAFgC,GAEpB,mBAASC,KAAT,CAAe,MAAf,CAFoB;AAGhCC,+BAHgC,GAGtB,IAAIF,SAAJ,EAHsB;AAAA,0DAI/B,IAAIG,OAAJ;AAAA,mGAAa,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAEWL,UAAUM,sBAAV,CAAiC,EAAET,oBAAF,EAAaC,kBAAb,EAAjC,CAFX;;AAAA;AAENS,wDAFM;;AAGZL,wDAAQ,UAAR,IAAsBK,QAAtB;AACAL,wDAAQ,WAAR,IAAuBL,SAAvB;AACAK,wDAAQ,UAAR,IAAsBJ,QAAtB;AALY;AAAA,uDAMUI,QAAQM,IAAR,EANV;;AAAA;AAMNC,uDANM;;AAOZV,yDAAS,MAAT,IAAmBU,QAAQC,GAA3B;AAPY;AAAA,uDAQNX,SAASS,IAAT,EARM;;AAAA;AASZJ,wDAAQK,OAAR;AATY;AAAA;;AAAA;AAAA;AAAA;;AAWZJ;;AAXY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAb;;AAAA;AAAA;AAAA;AAAA,4BAJ+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1C;;AAAA;AAAA;AAAA;AAAA;;AAoBA,IAAMM,YAAY,mBAASV,KAAT,CAAe,WAAf,EAA4B1B,eAA5B,CAAlB;;kBAEeoC,S","file":"LocalAuth.js","sourcesContent":["import mongoose,{ Schema } from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport { generateSalt } from '../services';\n\nconst localAuthSchema = new Schema({\n    email: {\n        type: String\n    },\n    password: {\n        type: String,\n        minlength: [8, 'Password must be 5 characters or more.']\n    },\n    user: { type: Schema.ObjectId, ref:'User' }\n});\n\n// Write encryption for Password\n/**\n * The pre-save hook method.\n */\n// On save hook, encrypt password\nlocalAuthSchema.pre('save', async function (next) {\n    const user = this;\n    try {\n        const salt = await generateSalt(user.password);\n        const hash = await bcrypt.hash(user.password, salt);\n        user.password = hash;\n        next()\n\n    } catch (error) {\n        next(error);\n    }\n});\n\n// compare password when local login \nlocalAuthSchema.methods.comparePassword = function (condidatePassword, callback) {\n    bcrypt.compare(condidatePassword, this.password, function (err, isMatch) {\n        if (err) callback(err);\n        callback(null, isMatch)\n    })\n};\n\nlocalAuthSchema.statics.createLocalUser = async function ({ firstName, lastName, password, email }) {\n    const localObj = new this({ email, password });\n    const UserModel = mongoose.model('User');\n    const userObj = new UserModel();\n    return new Promise( async (resolve, reject) => {\n        try {\n            const username = await UserModel.generateUniqueUserName({ firstName, lastName });\n            userObj['username'] = username;\n            userObj['firstName'] = firstName;\n            userObj['lastName'] = lastName;\n            const newUser = await userObj.save();\n            localObj['user'] = newUser._id;\n            await localObj.save();\n            resolve(newUser)\n        } catch (err) {\n            reject(err)\n        }\n    })\n};\n\nconst LocalAuth = mongoose.model('localAuth', localAuthSchema);\n\nexport default LocalAuth;"]}