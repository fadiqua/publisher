{"version":3,"sources":["../../server/models/SocialAuth.js"],"names":["socialAuthSchema","provider","type","String","required","providerId","email","user","ObjectId","ref","statics","findOrCreate","network","data","socialObj","UserModel","model","userObj","Promise","resolve","reject","findOne","id","firstName","first_name","toLowerCase","lastName","last_name","generateUniqueUserName","username","thumbnail","thumbnailName","image","url","dest","filename","pictureName","picture","split","save","newUser","_id","findById","existsUser","SocialAuth"],"mappings":"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","file":"SocialAuth.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\nimport { fileUniqueName } from '../utils/functions';\nimport download from 'image-downloader';\n\nconst socialAuthSchema = new Schema({\n    provider: {\n        type: String,\n        required: true\n    },\n    providerId: {\n        type: String,\n        required: true\n    },\n    email: {\n        type: String\n    },\n    user: { type: Schema.ObjectId, ref:'User' }\n});\n\nsocialAuthSchema.statics.findOrCreate = function (network, data) {\n    const socialObj = new this();\n    const UserModel = mongoose.model('User');\n    const userObj = new UserModel();\n    return new Promise( async (resolve, reject) => {\n        try {\n            const user = await this.findOne({ provider: network, providerId: data.id });\n            if(!user) {\n                socialObj['providerId'] = data.id;\n                socialObj['provider'] = network;\n                const firstName = data.first_name ? data.first_name.toLowerCase() : 'f';\n                const lastName = data.last_name ? data.last_name.toLowerCase() : 'l';\n                const username = await UserModel.generateUniqueUserName({ firstName, lastName });\n                userObj['username'] = username;\n                userObj['firstName'] = firstName;\n                userObj['lastName'] = lastName;\n                userObj['email'] = data.email || null;\n                userObj['thumbnail'] = null;\n                if(data.thumbnail) {\n                    let thumbnailName = `thumb-50-${fileUniqueName()}.jpg`;\n                    const { filename, image } = await download.image({url: data.thumbnail,\n                        dest: `./files/thumbs/${thumbnailName}`});\n                    userObj['thumbnail'] = thumbnailName;\n                }\n                // userObj['thumbnail'] = data.thumbnail;\n                if(network === 'facebook'){\n                    let pictureName = `fb-${fileUniqueName()}.jpg`;\n                    if(data.picture){\n                        const { filename, image } = await download.image({\n                            url:data.picture+'?type=large',\n                            dest: `./files/${pictureName}`\n                        });\n                        userObj['picture'] = pictureName;\n                    }\n                }\n                if(network === 'google'){\n                    let pictureName = `g-${fileUniqueName()}.jpg`;\n                    if(data.picture) {\n                        const { filename, image } = await download.image({url:data.picture.split('?sz=')[0],\n                            dest: `./files/${pictureName}`});\n                        userObj['picture'] = pictureName;\n                    }\n                }\n                const newUser = await userObj.save();\n                socialObj['user'] = newUser._id;\n                await socialObj.save();\n                resolve(newUser);\n            } else {\n                const existsUser = await UserModel.findById(user.user);\n                resolve(existsUser)\n            }\n        } catch (e) {\n            reject(e)\n        }\n    })\n};\n\nconst SocialAuth = mongoose.model('SocialAuth', socialAuthSchema);\n\nexport default SocialAuth;"]}