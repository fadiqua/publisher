{"version":3,"sources":["../../server/config/roles.js"],"names":["roles","manager","can","inherits","writer","name","when","params","cb","id","owner","guest","RBAC","opts","init","TypeError","map","Object","keys","forEach","role","operation","Promise","resolve","reject","$role","Error","canDo","parent","err","result","console","log"],"mappings":"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","file":"roles.js","sourcesContent":["export const roles = {\n    manager: {\n        can: ['publish'],\n        inherits: ['writer']\n    },\n    writer: {\n        can: ['write', {\n            name: 'edit',\n            when: function (params, cb) {\n                if(params.id !== params.owner){\n                    cb('error', null)\n                }\n                cb(null, params.id === params.owner);\n\n            }\n        }],\n        inherits: ['guest']\n    },\n    guest: {\n        can: ['read']\n    }\n};\n\n\nclass RBAC {\n    constructor(opts) {\n        this.init(opts);\n    }\n    init(roles) {\n        if(typeof roles !== 'object') {\n            throw new TypeError('Expected an object as input');\n        }\n\n        this.roles = roles;\n        let map = {};\n        Object.keys(roles).forEach(role => {\n            map[role] = {\n                can: {}\n            };\n            if(roles[role].inherits) {\n                map[role].inherits = roles[role].inherits;\n            }\n\n            roles[role].can.forEach(operation => {\n                if(typeof operation === 'string') {\n                    map[role].can[operation] = 1;\n                } else if(typeof operation.name === 'string'\n                    && typeof operation.when === 'function') {\n\n                    map[role].can[operation.name] = operation.when;\n                }\n                // Ignore definitions we don't understand\n            });\n\n        });\n\n        this.roles = map;\n    }\n    can(role, operation, params) {\n        return new Promise((resolve, reject) => {\n            // Check if role exists\n            if (typeof role !== 'string') {\n                throw new TypeError('Expected first parameter to be string : role');\n            }\n\n            if (typeof operation !== 'string') {\n                throw new TypeError('Expected second parameter to be string : operation');\n            }\n\n            if(!this.roles[role]) {\n                reject('role does not exist.');\n            }\n            // Check if this role has this operation\n            let $role = this.roles[role];\n\n            if (!$role) {\n                throw new Error('Undefined role');\n            }\n            // IF this operation is not defined at current level try higher\n            if (!$role.can[operation]) {\n                // If no parents reject\n                if (!$role.inherits) {\n                    return reject(false);\n                }\n                let canDo = false;\n\n                $role.inherits.map(parent => {\n                    return canDo = canDo || this.can(parent, operation, params)\n                });\n                if(canDo){resolve(true)}\n                else { reject(false)}\n            }\n            // We have the operation resolve\n            if ($role.can[operation] === 1) {\n                return resolve(true);\n            }\n            // Operation is conditional, run async function\n            if (typeof $role.can[operation] === 'function') {\n                $role.can[operation](params, function (err, result) {\n                    console.log('fadi', err, result);\n                    if(err ) {\n                        reject(err);\n                    }\n                    else if(!result ) {\n                        reject(false);\n                    } else {\n                        resolve(true);\n                    }\n                });\n            }\n            // No operation reject as false\n            reject(false);\n        })\n\n    }\n}\n\nexport default RBAC;"]}