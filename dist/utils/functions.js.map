{"version":3,"sources":["../../server/utils/functions.js"],"names":["stripTags","slugify","avgWordsPerMin","base64Encode","base64Decode","fileUniqueName","str","replace","toString","toLowerCase","trim","count","Math","ceil","file","bitmap","readFileSync","Buffer","base64str","console","log","writeFileSync","err","Date","valueOf","floor","random"],"mappings":";;;;;QAEgBA,S,GAAAA,S;QAGAC,O,GAAAA,O;QAQAC,c,GAAAA,c;QAIAC,Y,GAAAA,Y;QAQAC,Y,GAAAA,Y;QAWAC,c,GAAAA,c;;AApChB;;;;;;AAEO,SAASL,SAAT,CAAmBM,GAAnB,EAAwB;AAC3B,WAAOA,IAAIC,OAAJ,CAAY,eAAZ,EAA6B,EAA7B,CAAP;AACH;AACM,SAASN,OAAT,CAAiBK,GAAjB,EAAqB;AACxB,WAAOA,IAAIE,QAAJ,GAAeC,WAAf,GAA6BC,IAA7B,GACFH,OADE,CACM,MADN,EACc,GADd,EAC6B;AAD7B,KAEFA,OAFE,CAEM,IAFN,EAEY,OAFZ,EAE6B;AAF7B,KAGFA,OAHE,CAGM,WAHN,EAGmB,EAHnB,EAG6B;AAH7B,KAIFA,OAJE,CAIM,QAJN,EAIgB,GAJhB,CAAP,CADwB,CAKY;AACvC;;AAEM,SAASL,cAAT,CAAwBS,KAAxB,EAA+B;AAClC,WAAOC,KAAKC,IAAL,CAAUF,QAAM,IAAhB,CAAP;AACH;;AAEM,SAASR,YAAT,CAAsBW,IAAtB,EAA4B;AAC/B;AACA,QAAMC,SAAS,aAAGC,YAAH,CAAgBF,IAAhB,CAAf;AACA;AACA,WAAO,IAAIG,MAAJ,CAAWF,MAAX,EAAmBP,QAAnB,CAA4B,QAA5B,CAAP;AACH;;AAED;AACO,SAASJ,YAAT,CAAsBc,SAAtB,EAAiCJ,IAAjC,EAAuC;AAC1C;AACA,QAAMC,SAAS,IAAIE,MAAJ,CAAWC,UAAUX,OAAV,CAAkB,0BAAlB,EAA8C,EAA9C,CAAX,EAA8D,QAA9D,CAAf;AACAY,YAAQC,GAAR,CAAY,iBAAZ;AACA;AACA,iBAAGC,aAAH,CAAiBP,IAAjB,EAAuBC,MAAvB,EAA+B,UAACO,GAAD,EAAS;AACpC,YAAIA,GAAJ,EAAS,MAAMA,GAAN;AACZ,KAFD;AAGAH,YAAQC,GAAR,CAAY,2DAAZ;AACH;;AAEM,SAASf,cAAT,GAA0B;AAC7B,WAAW,IAAIkB,IAAJ,EAAD,CAAWC,OAAX,EAAV,SAAkCZ,KAAKa,KAAL,CAAWb,KAAKc,MAAL,KAAc,KAAzB,CAAlC;AACH","file":"functions.js","sourcesContent":["import fs from 'fs';\n\nexport function stripTags(str) {\n    return str.replace(/(<([^>]+)>)/ig, \"\");\n}\nexport function slugify(str){\n    return str.toString().toLowerCase().trim()\n        .replace(/\\s+/g, '-')           // Replace spaces with -\n        .replace(/&/g, '-and-')         // Replace & with 'and'\n        .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n        .replace(/\\-\\-+/g, '-');        // Replace multiple - with single -\n}\n\nexport function avgWordsPerMin(count) {\n    return Math.ceil(count/1050);\n}\n\nexport function base64Encode(file) {\n    // read binary data\n    const bitmap = fs.readFileSync(file);\n    // convert binary data to base64 encoded string\n    return new Buffer(bitmap).toString('base64');\n}\n\n// function to create file from base64 encoded string\nexport function base64Decode(base64str, file) {\n    // create buffer object from base64 encoded string, it is important to tell the constructor that the string is base64 encoded\n    const bitmap = new Buffer(base64str.replace(/^data:image\\/\\w+;base64,/, \"\"), 'base64');\n    console.log('start saving...')\n    // write buffer to file\n    fs.writeFileSync(file, bitmap, (err) => {\n        if (err) throw err;\n    });\n    console.log('******** File created from base64 encoded string ********');\n}\n\nexport function fileUniqueName() {\n    return `${(new Date).valueOf()}-${Math.floor(Math.random()*99999)}`;\n}"]}